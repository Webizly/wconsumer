<?php

//Define base table names for any dependant modules
define('WC_CORE_T_SERVICE', 'wc_core_service');
define('WC_CORE_T_USER', 'wc_core_user');
define('WC_CORE_T_REQUEST', 'wc_core_request');
define('WC_CORE_EXCEPTION_CATEGORY', 'wc_core');


function wc_core_menu() {
  $items['user/%/wc_core']           = array(
    // The title - do NOT use t() as t() is called automatically.
    'title' => 'My Services',
    'type' => MENU_LOCAL_TASK,
    'description' => 'User Can Authenticate Web Services Here',
    'page callback' => '_wc_core_user_services',
    // For a permissioned menu entry, we provide an access callback which
    // determines whether the current user should have access. The default is
    // user_access(), which we'll use in this case. Since it's the default,
    // we don't even have to enter it.
    'access callback' => 'user_access',
    // The 'access arguments' are passed to the 'access callback' to help it
    // do its job. In the case of user_access(), we need to pass a permission
    // as the first argument.
    'access arguments' => array(
      'manage twitter'
    )
    // The optional weight element tells how to order the submenu items.
    // Higher weights are "heavier", dropping to the bottom of the menu.
  );
  $items['wc_core']                  = array(
    // The title - do NOT use t() as t() is called automatically.
    'title' => 'Web Consumer Manager',
    'description' => 'Manage Web Services',
    'page callback' => '_wc_core_manager',
    // For a permissioned menu entry, we provide an access callback which
    // determines whether the current user should have access. The default is
    // user_access(), which we'll use in this case. Since it's the default,
    // we don't even have to enter it.
    'access callback' => 'user_access',
    // The 'access arguments' are passed to the 'access callback' to help it
    // do its job. In the case of user_access(), we need to pass a permission
    // as the first argument.
    'access arguments' => array(
      'manage web consumer'
    )
    // The optional weight element tells how to order the submenu items.
    // Higher weights are "heavier", dropping to the bottom of the menu.
  );
	
  // Service Settings
  $items['wc_core/settings']	= array(
      'title'		=> 'Settings',
      'type'		=> MENU_NORMAL_ITEM,
      'description'		=> 'Manage Service Settings',
      'page callback'	=> '_wc_service_config_default',
                  
      // For a permissioned menu entry, we provide an access callback which
      // determines whether the current user should have access. The default is
      // user_access(), which we'll use in this case. Since it's the default,
      // we don't even have to enter it.
      'access callback' => 'user_access',
                  
      'access arguments' => array(
        'manage web consumer'
      ),
          );
          
          // Default Tab
          
    $items['wc_core/settings/default'] = array(
      'type'		=> MENU_DEFAULT_LOCAL_TASK,
      'title'		=> 'Settings Management',
      'weight'	=> 1,
    );
          
    $config = array();
    $config = module_invoke_all('wc_config', $config);
    // Only one array item (not counting oauthCallback)
    if (isset($config['service']) AND count($config['service']) > 0) :
      $i = 1;
      
      foreach($config['service'] as $name => $data) :
          $i++;
              
          $items['wc_core/settings/'.$name] = array(
            // The title - do NOT use t() as t() is called automatically.
            'title'					=> ucwords($name),
            'type'					=> MENU_LOCAL_TASK,
            'description'		=> 'Manage Service',
            'page callback'	=> '_wc_core_service_manager',
    
            // The service name
            'page arguments'	=> array(2),
    
            // For a permissioned menu entry, we provide an access callback which
            // determines whether the current user should have access. The default is
            // user_access(), which we'll use in this case. Since it's the default,
            // we dont even have to enter it.
            'access callback' => 'user_access',
            // The 'access arguments' are passed to the 'access callback' to help it
            // do its job. In the case of user_access(), we need to pass a permission
            // as the first argument.
            'access arguments' => array('manage '.$name),
          // The optional weight element tells how to order the submenu items.
          // Higher weights are "heavier", dropping to the bottom of the menu.
            'weight'	=> $i,
          );
      endforeach;
    endif;
          
          
  $items['wc_core/callback/%']         = array(
    // A type of MENU_CALLBACK means leave the path completely out of the menu
    // links.
    'type'			=> MENU_CALLBACK,
    // The title is still used for the page title, even though it's not used
    // for the menu link text, since there's no menu link.
    'title'			=> 'Callback Only',
		
    'page callback'			=> '_wc_core_callback',
		
		// They pass the first argument as the service name
		'page arguments'		=> array(2),
		
    'access callback'		=> TRUE
  );
	
	/*
  // Now provide the actual permissioned menu item.
  $items['user/%/wc_core/authorize/%'] = array(
    // The title - do NOT use t() as t() is called automatically.
    'title' => 'Authenticate Twitter',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Get Oauth Tokens',
    'page callback' => '_wc_core_token_request',
    // For a permissioned menu entry, we provide an access callback which
    // determines whether the current user should have access. The default is
    // user_access(), which we'll use in this case. Since it's the default,
    // we don't even have to enter it.
    'access callback' => 'user_access',
		
		// Service Name
		'page arguments' => array(1),
		
    // The 'access arguments' are passed to the 'access callback' to help it
    // do its job. In the case of user_access(), we need to pass a permission
    // as the first argument.
    'access arguments' => array(
      'manage twitter'
    )
    // The optional weight element tells how to order the submenu items.
    // Higher weights are "heavier", dropping to the bottom of the menu.
  );
  $items['user/%/wc_core/revoke/%']    = array(
    // The title - do NOT use t() as t() is called automatically.
    'title'					=> 'Revoke Twitter',
    'type'						=> MENU_LOCAL_TASK,
    'description'		=> 'Get Oauth Tokens',
    'page callback'	=> '_wc_core_revoke',
		
		// The service name
		'page arguments'	=> array(1),
		
    // For a permissioned menu entry, we provide an access callback which
    // determines whether the current user should have access. The default is
    // user_access(), which we'll use in this case. Since it's the default,
    // we dont even have to enter it.
    'access callback' => 'user_access',
    // The 'access arguments' are passed to the 'access callback' to help it
    // do its job. In the case of user_access(), we need to pass a permission
    // as the first argument.
    'access arguments' => array(
      'manage twitter'
    )
    // The optional weight element tells how to order the submenu items.
    // Higher weights are "heavier", dropping to the bottom of the menu.
  );
	*/
  return $items;
}
function _wc_core_revoke($service = '') {
	if ($service == '')
		drupal_exit();
	
  unset($_SESSION[$service.'_oauth_token']);
  unset($_SESSION[$service.'_oauth_token_secret']);
  
   $fields = array(
      'access_token' => null,               
      'access_token_secret' => null,
      );
  //Blank the credentials, records should stay in place to prevent orphans
  //due to requests which may have already been made.
  _wc_core_setUserCreds($service, $fields);
  
  $message = 'done';
  
	return $message;
}
function _wc_core_manager() {
	return 'apple';
}

/**
 * Callback to manage a specific service
 *
 * Will let the user specify the OAuth Consumer Key/Secret or the
 * API Key for the service depending upon the authentication method.
 **/
function _wc_core_service_manager($service = '') {
        // Throw a 404 if nothing is passed
    if ($service == '')
            return drupal_not_found();
          
    //sets the default call back url
    $config = array();
    //$config['oauthCallback'] = 'http://www.webizly.biz/wc_core/callback/'.
    //$service;
    
    $config['oauthCallback'] = url('wc_core/callback/'.$service,
    array('absolute' => TRUE));
          
    //calls to load the config hook from the module - this needs changed to only
    //load config for the correct config per sub module
    $config = module_invoke_all('wc_config', $config);
    
    // Only one array item (not counting oauthCallback)
    if (! isset($config['service']) OR count($config['service']) == 0 OR !
    isset($config['service'][$service]) )
            return drupal_not_found();
    
    if (! isset($config['service'][$service]['authMethod']) )
            $config['service'][$service]['authMethod'] = 'oauth';
    
    switch($config['service'][$service]['authMethod']) {
      case 'apiKey' :
              return drupal_get_form('_wc_core_apiAuth_form',
              $config['service'][$service]);
      break;
      
      // Defaults back to oauth Could change this in the future
      default :
              return drupal_get_form('_wc_core_oAuth_form',
              $config['service'][$service]);
      break;
    }
}

/**
 * Callback for the OAuth Authencation Form Settings
 *
 * @param		array
 * @param		array Form State
 * @param		array The config for the respective service
**/
function _wc_core_oAuth_form($form, $form_state, $service) {
    
    $serviceCreds = _wc_core_getServiceCreds($service);

    
    $form[$service['name']] = array(
      '#type' => 'fieldset',
      '#title' => t(ucwords($service['name']).' Service Configuration'), '#tree' => TRUE,
      '#access' => _wc_core_user_account_access($service['name'])
      );
      
      if (isset($service['applicationCreateURL'])) :
              $form[$service['name']]['create_app_url'] = array(
                      '#markup' => t('You can create an application at <a
                      href="'.$service['applicationCreateURL'].'">'.$service['applicationCreateURL'].'</a>.'),
              );
      endif;
      
    $form[$service['name']]['createAppUrl'] = array(
      '#type' => 'item', '#title' => 'Application Callback URL',
      '#tree' => TRUE,
      '#markup' => url('wc_core/callback/'.$service['name'],
      array('absolute' => TRUE)),
    );
      
      
    $form[$service['name']]['consumer-key'] = array(
      '#type' => 'textfield',
      '#title' => 'Consumer Key', '#tree' => TRUE,
      '#access' => _wc_core_user_account_access($service['name']),
      //'#default_value' => variable_get($service['name'].'_consumer_key', ''),
      '#default_value' => $serviceCreds['consumer_key'],
      '#required' => TRUE,
    );
      
    $form[$service['name']]['consumer-secret'] = array(
      '#type' => 'textfield', '#title' => 'Consumer Secret', '#tree' => TRUE,
      '#access' => _wc_core_user_account_access($service['name']),
      //'#default_value' => variable_get($service['name'].'_consumer_secret', ''),
      '#default_value' => $serviceCreds['consumer_secret'],
      '#required' => TRUE,
      );
      
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save Configuration'));
    
    $form['service-name'] = array(
      '#type' => 'hidden',
      '#value' => $service['name']);
      
      return $form;
}

/**
 * Callback to submit the OAuth Form
**/
function _wc_core_oAuth_form_submit($form, $form_state)
{
    // The POST Data
    $values = $form_state['values'];
    
    if (! isset($values['service-name']) )
            drupal_exit();
    
    $service = $values['service-name'];
    
    if (! isset($values[$service]) )
            drupal_exit();
    
    $fields = array(
      'consumer_key' => $values[$service]['consumer-key'],
      'consumer_secret' => $values[$service]['consumer-secret'],
      );
    _wc_core_setServiceCreds($service, $fields);
    
    drupal_set_message(t('Service configuration saved.'));
} 

function _wc_core_callback($service = '') {
	global $base_url;
	
	// Throw a 404 if nothing is passed
	if ($service == '')
		return drupal_not_found();
	
  //loads the include file
  module_load_include('inc', 'wc_core', 'includes/oauth-class');
	
  //sets the default call back url
  $config = array();
	$config['oauthCallback'] = $base_url.'wc_core/callback/'.$service;
  $config = module_invoke_all('wc_config', $config);
  
	// Only one array item (not counting oauthCallback)
	if (! isset($config['service']) OR count($config['service']) == 0 OR ! isset($config['service'][$service]) )
		return drupal_not_found();
	
  // this moves the returned config settings from the sub module into variabls, it could be shortened in the future to directly use them
  $accessTokenURL          = $config['service'][$service]['accessTokenURL'];
  $authenticateURL         = $config['service'][$service]['authenticateURL'];
  $authorizeURL            = $config['service'][$service]['authorizeURL'];
  $requestTokenURL         = $config['service'][$service]['requestTokenURL'];
  $consumerKey             = variable_get($service.'_consumer_key');
  $consumerSecret          = variable_get($service.'_consumer_secret');
  $oAuthCallback           = $config['oauthCallback'];
	
  // creates the connection with the appropriate settings
  $connection              = new oauthConnectionDrupal($accessTokenURL, $authenticateURL, $authorizeURL, $requestTokenURL);
  $connection->createConnection($consumerKey, $consumerSecret, $_SESSION[$service . '_oauth_token'], $_SESSION[$service . '_oauth_token_secret']);
  print_r($connection); 
	// gets the access tokens
  $access_tokens = $connection->getAccessToken($_REQUEST['oauth_verifier']);
// print_r($access_tokens);
//echo $service;   

  $fields = array(
      'access_token' => $access_tokens['oauth_token'],               
      'access_token_secret' => $access_tokens['oauth_token_secret']
      );
  _wc_core_setUserCreds($service, $fields);
  
	
  global $user;
  
	// If HTTP response is 200 continue otherwise send to connect page to retry this
	// needs fixed to get it to work right with reauthentication  currently this is
	// set to allways authenticate and it needs set to forward to the correct page,
	// but it might be possible to have a common page that they all go to
  print_r($connection);
  if (200 == $connection->http_code) {
    /* The user has been verified and the access tokens can be saved for future use */
    //$_SESSION['status'] = 'verified';
    header('Location: ' . $base_url. '/user/' . $user->uid . '/wc_core');
  } //200 == $connection->http_code
  else {
    /* Save HTTP status for error dialog on connnect page.*/
     header('Location: ./');
  }


}
function forEachArray($array) {
  $content = '';
  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $content .= $key . ": <br>";
      forEachArray($value);
    } //is_array($value)
    else {
      if (is_array($value)) {
        forEachArray($value);
      } //is_array($value)
      else {
      }
      $content .= $key . ': ' . $value . "<br>";
    }
  } //$array as $key => $value
  return $content;
}
function _wc_core_user_services() {
  //    module_load_include('inc', 'wc_core', 'includes/oauth');
  //    $config = array();
  //    $config['oauthCallback'] = 'http://www.webizly.biz/wc_core/callback';
  //    $config = module_invoke_all('wc_config',$config);
  //    $config['oauthCallback'] = 'http://www.webizly.biz/wc_core/callback';
  //    drupal_set_message(t('Unable to Connect to:', array('@var' => print_r($config, TRUE))), 'butterflies');
  //print_r($config);
  //    $content = '';
  return drupal_get_form('_wc_core_user_services_form');
}
function _wc_core_user_services_form($form, &$form_state) {
  $config = array();
  $config = module_invoke_all('wc_config', $config);
  foreach ($config['service'] as $service) {
    $form[$service['name']]           = array(
      '#type' => 'fieldset',
      '#title' => t(ucwords($service['name'])),
      '#tree' => TRUE,
      '#access' => _wc_core_user_account_access($service['name'])
    );
    $form[$service['name']]['markup'] = array(
      '#markup' => _wc_core_account_status($service['name'])
    );
		$form['service-name'] = array('#type' => 'hidden', '#value' => $service['name']);
		
    $form[$service['name']]['action'] = array(
      '#type' => 'button',
      '#name' => $service['name'],
      '#value' => t('Authenticate ' . ucfirst($service['name'])),
      '#executes_submit_callback' => TRUE
      //'#submit' => array('_wc_core_user_services_form_submit'), 
    );
  } //$config['service'] as $service
  return $form;
}
function _wc_core_user_account_access($service) {
  $access = TRUE;
  if ($service == 'twitter') {
    $access = TRUE;
  } //$service == 'twitter'
  return $access;
}
function _wc_core_account_status($service) {
  return $service . '</p>';
}
function _wc_core_user_services_form_submit($form, &$form_state) {
	getAuthorizationURL($form_state['values']['service-name']);
}
function wc_core_permission() {
  return array(
    'manage web consumer' => array(
      'title' => t('manage web consumer')
    )
  );
}
function getAuthorizationURL($service) {
  global $base_url;


	echo $service;
  module_load_include('inc', 'wc_core', 'includes/oauth-class');
  
	$config = array();
  $config = module_invoke_all('wc_config', $config);
  
	drupal_set_message(t('Config : @var', array(
    '@var' => print_r($config['service'][$service], TRUE)
  )), 'butterflies');
        
  $serviceCreds = _wc_core_getServiceCreds($service);
  

  $serviceName     = $service;
  $accessTokenURL  = $config['service'][$service]['accessTokenURL'];
  $authenticateURL = $config['service'][$service]['authenticateURL'];
  $authorizeURL    = $config['service'][$service]['authorizeURL'];
  $requestTokenURL = $config['service'][$service]['requestTokenURL'];
  $consumerKey     = $serviceCreds['consumer_key'];
  $consumerSecret  = $serviceCreds['consumer_secret'];

	
  // $oAuthCallback   = 'http://www.webizly.biz/wc_core/callback/'.$service;
	$oAuthCallback   = $base_url . '/wc_core/callback/'.$service;
	echo 'service';
	
  $connection = new oauthConnectionDrupal($accessTokenURL, $authenticateURL, $authorizeURL, $requestTokenURL);
  $connection->createConnection($consumerKey, $consumerSecret);
	$request_token = $connection->getRequestToken($oAuthCallback);
	
  $_SESSION[$service.'_oauth_token']        = $token = $request_token['oauth_token'];
  $_SESSION[$service.'_oauth_token_secret'] = $request_token['oauth_token_secret'];
  $url = $connection->createAuthorizeURL($_SESSION[$service.'_oauth_token'] , FALSE);
  
  drupal_set_message(t('Config : @var @appData', array(
    '@var' => print_r($request_token, TRUE),
		'@appData' => print_r(array($consumerKey, $consumerSecret, $oAuthCallback), TRUE),
  )), 'butterflies');
		
  drupal_goto($url, array(
    'external' => TRUE
  ));
}
function _wc_core_token_request($service = '') {
	if ($service == '')
		drupal_exit();


  module_load_include('inc', 'wc_core', 'includes/oauth-class');
  module_load_include('inc', 'wc_core', 'includes/twitteroauth');

  $serviceCreds = _wc_core_getServiceCreds($service);

  define($service.'OAUTH_CALLBACK', url('wc_core/callback/'.$service));
	
  $connection                     = new TwitterOAuth($serviceCreds['consumer_key'], $serviceCreds['consumer_secret']);
  /* Get temporary credentials. */
  $request_token                  = $connection->getRequestToken(OAUTH_CALLBACK);
  $_SESSION[$service.'_oauth_token']        = $token = $request_token['oauth_token'];
  $_SESSION[$service.'_oauth_token_secret'] = $request_token['oauth_token_secret'];
  $url                            = $connection->getAuthorizeURL($_SESSION[$service.'_oauth_token'], FALSE);
  header('Location: ' . $url);
  //return $url;
}

/**
 * Callback for the Default Tab for the Service Configuration
 *
 * @access	public
**/
function _wc_service_config_default()
{
	return 'Please select a service to manage from the tabs above.';
}

/**Retrieves credentials which identify consumer to producer association
 *
 *@return array An associative array of credentials keyed by DB attribute names.
 **/
function _wc_core_getServiceCreds($service_name){
  
  //TODO implement caching or define to reduce DB hits
  
  $creds = db_select(WC_CORE_T_SERVICE)
      ->fields(WC_CORE_T_SERVICE)
      ->condition('service_name', $service_name)
      ->execute()
      ->fetchAssoc();
  
  return $creds;
}

/**Writes service credentials based on passed service name
 *
 **/
function _wc_core_setServiceCreds($service_name, $fields){
   
  db_merge(WC_CORE_T_SERVICE)
    ->key(array('service_name' => $service_name))
    ->fields($fields)
    ->execute();
}

/**Writes user credentials based on passed service name
 *
 **/
function _wc_core_setUserCreds($service_name, $fields, $uid = null){

  //If no user id passed, retrieve the current
  if(!$uid){
    global $user;
    $uid = $user->uid;
  }

  try {
      $sid = db_select(WC_CORE_T_SERVICE)
        ->fields(WC_CORE_T_SERVICE, array('sid'))
        ->condition('service_name', $service_name)
        ->execute()
        ->fetchCol();
      
      db_merge(WC_CORE_T_USER)
        ->key(array('sid' => $sid, 'uid' => $uid))
        ->fields($fields)
        ->execute();
  }
  catch (Exception $e) {

      watchdog_exception(WC_CORE_EXCEPTION_CATEGORY, $e);
      return false;
  }
  return true;
}