
<?php
function wc_core_menu() {
$items['wc_core'] = array(
    // The title - do NOT use t() as t() is called automatically.
    'title' => 'Web Consumer Manager',
    'description' => 'Manage Web Services',
    'page callback' => '_wc_core_manager',
    // For a permissioned menu entry, we provide an access callback which
    // determines whether the current user should have access. The default is
    // user_access(), which we'll use in this case. Since it's the default,
    // we don't even have to enter it.
    'access callback' => 'user_access',
    // The 'access arguments' are passed to the 'access callback' to help it
    // do its job. In the case of user_access(), we need to pass a permission
    // as the first argument.
    'access arguments' => array(
      'manage web consumer'
    ),
    // The optional weight element tells how to order the submenu items.
    // Higher weights are "heavier", dropping to the bottom of the menu.
  );
  
  $items['wc_core/callback']          = array(
    // A type of MENU_CALLBACK means leave the path completely out of the menu
    // links.
    'type' => MENU_CALLBACK,
    // The title is still used for the page title, even though it's not used
    // for the menu link text, since there's no menu link.
    'title' => 'Callback Only',
    'page callback' => '_wc_core_callback',
    'access callback' => TRUE,
    
  );
  // Now provide the actual permissioned menu item.

  return $items;
}

function _wc_core_manager() {
	$message = 'manager';
	return $message;
}

function _wc_core_callback() {

  module_load_include('inc', 'wc_core', 'includes/oauth');
  $accessTokenURL  = 'https://api.twitter.com/oauth/access_token'; 
  $authenticateURL = 'https://api.twitter.com/oauth/authenticate'; 
  $authorizeURL    = 'https://api.twitter.com/oauth/authorize'; 
  $requestTokenURL = 'https://api.twitter.com/oauth/request_token'; 
  
  
  //module_load_include('inc', 'wc_core', 'includes/twitteroauth');
  define('CONSUMER_KEY', 'YMM6LRTqymjyjNeui7Ydgg');
  define('CONSUMER_SECRET', '5syCnfNAfBWMnxp2F2s1Zq1XRysxvZ1xmq2zh10');
  define('OAUTH_CALLBACK', 'http://www.webizly.biz/wc_core/callback');
  /* Create TwitteroAuth object with app key/secret and token key/secret from default phase */
  $connection    = new oauthConnection($accessTokenURL, $authenticateURL, $authorizeURL , $requestTokenURL);
  $connection->createConnection(CONSUMER_KEY, CONSUMER_SECRET, $_SESSION['oauth_token'], $_SESSION['oauth_token_secret']);
  /* Request access tokens from twitter */
  $access_tokens = $connection->getAccessToken($_REQUEST['oauth_verifier']);
  //print_r($access_tokens);
  
  /* Save the access tokens. Normally these would be saved in a database for future use. */
  variable_set('oauth_token', $access_tokens['oauth_token']);
  variable_set('oauth_token_secret', $access_tokens['oauth_token_secret']);
  /* If HTTP response is 200 continue otherwise send to connect page to retry */
  global $user;
  print_r($_SERVER);
  if (200 == $connection->http_code) {
    /* The user has been verified and the access tokens can be saved for future use */
    //$_SESSION['status'] = 'verified';
    header('Location: /user/'. $user->uid .'/wc_core/service/twitter');
  } //200 == $connection->http_code
  else {
    /* Save HTTP status for error dialog on connnect page.*/
    header('Location: ./');
  }
}
function wc_core_permission() {
  return array(
    'manage web consumer' => array(
      'title' => t('manage web consumer')
  ));
}

class oauthConnection {
  /* Contains the last HTTP status code returned. */
  public $http_code;
  /* Contains the last API call. */
  public $url;
  /* Set up the API root URL. */
  public $host = "https://api.twitter.com/1/";
  /* Set timeout default. */
  public $timeout = 30;
  /* Set connect timeout. */
  public $connecttimeout = 30; 
  /* Verify SSL Cert. */
  public $ssl_verifypeer = FALSE;
  /* Respons format. */
  public $format = 'json';
  /* Decode returned json data. */
  public $decode_json = TRUE;
  /* Contains the last HTTP headers returned. */
  public $http_info;
  /* Set the useragnet. */
  public $useragent = 'TwitterOAuth v0.2.0-beta2';
  /* Immediately retry the API call if the response was not successful. */
  //public $retry = TRUE;
  protected $AccessTokenURL;
  protected $AuthenticateURL;
  protected $AuthorizeURL;
  protected $RequestTokenURL;



  /**
   * Set API URLS
   */
  function setAccessTokenURL($AccessTokenURL)  { $this->AccessTokenURL = $AccessTokenURL; }
  function setAuthenticateURL($AuthenticateURL) { $this->AuthenticateURL = $AuthenticateURL; }
  function setAuthorizeURL($AuthorizeURL)    { $this->AuthorizeURL = $AuthorizeURL; }
  function setRequestTokenURL($RequestTokenURL) { $this->RequestTokenURL = $RequestTokenURL; }
  
  function getAccessTokenURL()  { return $this->AccessTokenURL; }
  function getAuthenticateURL() { return $this->AuthenticateURL; }
  function getAuthorizeURL()    { return $this->AuthorizeURL; }
  function getRequestTokenURL() { return $this->RequestTokenURL; }

  /**
   * Debug helpers
   */
  function lastStatusCode() { return $this->http_status; }
  function lastAPICall() { return $this->last_api_call; }

  /**
   * construct TwitterOAuth object
   */
  function __construct($AccessTokenURL, $AuthenticateURL, $AuthorizeURL, $RequestTokenURL) {
    $this->setAccessTokenURL($AccessTokenURL);
    $this->setAuthenticateURL($AuthenticateURL);
    $this->setAuthorizeURL($AuthorizeURL);
    $this->setRequestTokenURL($RequestTokenURL);
  }
  function createConnection($consumer_key, $consumer_secret, $oauth_token = NULL, $oauth_token_secret = NULL) {
	$this->sha1_method = new OAuthSignatureMethod_HMAC_SHA1();
    $this->consumer = new OAuthConsumer($consumer_key, $consumer_secret);
    if (!empty($oauth_token) && !empty($oauth_token_secret)) {
      $this->token = new OAuthConsumer($oauth_token, $oauth_token_secret);
    } 
    else {
      $this->token = NULL;
    }
  }

  /**
   * Get a request_token from Twitter
   *
   * @returns a key/value array containing oauth_token and oauth_token_secret
   */
  function getRequestToken($oauth_callback = NULL) {
    $parameters = array();
    if (!empty($oauth_callback)) {
      $parameters['oauth_callback'] = $oauth_callback;
    } 
    $request = $this->oAuthRequest($this->getRequestTokenURL(), 'GET', $parameters);
    $token = OAuthUtil::parse_parameters($request);
    $this->token = new OAuthConsumer($token['oauth_token'], $token['oauth_token_secret']);
    return $token;
  }

  /**
   * Get the authorize URL
   *
   * @returns a string
   */
  function createAuthorizeURL($token, $sign_in_with_twitter = TRUE) {
    if (is_array($token)) {
      $token = $token['oauth_token'];
    }
    if (empty($sign_in_with_twitter)) {
      return $this->getAuthorizeURL() . "?oauth_token={$token}";
    } 
    else {
       return $this->getAuthenticateURL() . "?oauth_token={$token}";
    }
  }

  /**
   * Exchange request token and secret for an access token and
   * secret, to sign API calls.
   *
   * @returns array("oauth_token" => "the-access-token",
   *                "oauth_token_secret" => "the-access-secret",
   *                "user_id" => "9436992",
   *                "screen_name" => "abraham")
   */
  function getAccessToken($oauth_verifier = FALSE) {
    $parameters = array();
    if (!empty($oauth_verifier)) {
      $parameters['oauth_verifier'] = $oauth_verifier;
    }
    $request = $this->oAuthRequest($this->getAccessTokenURL(), 'GET', $parameters);
    $token = OAuthUtil::parse_parameters($request);
    $this->token = new OAuthConsumer($token['oauth_token'], $token['oauth_token_secret']);
    return $token;
  }

  /**
   * One time exchange of username and password for access token and secret.
   *
   * @returns array("oauth_token" => "the-access-token",
   *                "oauth_token_secret" => "the-access-secret",
   *                "user_id" => "9436992",
   *                "screen_name" => "abraham",
   *                "x_auth_expires" => "0")
   */  
  function getXAuthToken($username, $password) {
    $parameters = array();
    $parameters['x_auth_username'] = $username;
    $parameters['x_auth_password'] = $password;
    $parameters['x_auth_mode'] = 'client_auth';
    $request = $this->oAuthRequest($this->getAccessTokenURL(), 'POST', $parameters);
    $token = OAuthUtil::parse_parameters($request);
    $this->token = new OAuthConsumer($token['oauth_token'], $token['oauth_token_secret']);
    return $token;
  }

  /**
   * GET wrapper for oAuthRequest.
   */
  function get($url, $parameters = array()) {
    $response = $this->oAuthRequest($url, 'GET', $parameters);
    if ($this->format === 'json' && $this->decode_json) {
      return json_decode($response);
    }
    return $response;
  }
  
  /**
   * POST wrapper for oAuthRequest.
   */
  function post($url, $parameters = array()) {
    $response = $this->oAuthRequest($url, 'POST', $parameters);
    if ($this->format === 'json' && $this->decode_json) {
      return json_decode($response);
    }
    return $response;
  }

  /**
   * DELETE wrapper for oAuthReqeust.
   */
  function delete($url, $parameters = array()) {
    $response = $this->oAuthRequest($url, 'DELETE', $parameters);
    if ($this->format === 'json' && $this->decode_json) {
      return json_decode($response);
    }
    return $response;
  }

  /**
   * Format and sign an OAuth / API request
   */
  function oAuthRequest($url, $method, $parameters) {
    if (strrpos($url, 'https://') !== 0 && strrpos($url, 'http://') !== 0) {
      $url = "{$this->host}{$url}.{$this->format}";
    }
    $request = OAuthRequest::from_consumer_and_token($this->consumer, $this->token, $method, $url, $parameters);
    $request->sign_request($this->sha1_method, $this->consumer, $this->token);
    switch ($method) {
    case 'GET':
      return $this->http($request->to_url(), 'GET');
    default:
      return $this->http($request->get_normalized_http_url(), $method, $request->to_postdata());
    }
  }

  /**
   * Make an HTTP request
   *
   * @return API results
   */
  function http($url, $method, $postfields = NULL) {
    $this->http_info = array();
    $ci = curl_init();
    /* Curl settings */
    curl_setopt($ci, CURLOPT_USERAGENT, $this->useragent);
    curl_setopt($ci, CURLOPT_CONNECTTIMEOUT, $this->connecttimeout);
    curl_setopt($ci, CURLOPT_TIMEOUT, $this->timeout);
    curl_setopt($ci, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ci, CURLOPT_HTTPHEADER, array('Expect:'));
    curl_setopt($ci, CURLOPT_SSL_VERIFYPEER, $this->ssl_verifypeer);
    curl_setopt($ci, CURLOPT_HEADERFUNCTION, array($this, 'getHeader'));
    curl_setopt($ci, CURLOPT_HEADER, FALSE);

    switch ($method) {
      case 'POST':
        curl_setopt($ci, CURLOPT_POST, TRUE);
        if (!empty($postfields)) {
          curl_setopt($ci, CURLOPT_POSTFIELDS, $postfields);
        }
        break;
      case 'DELETE':
        curl_setopt($ci, CURLOPT_CUSTOMREQUEST, 'DELETE');
        if (!empty($postfields)) {
          $url = "{$url}?{$postfields}";
        }
    }

    curl_setopt($ci, CURLOPT_URL, $url);
    $response = curl_exec($ci);
    $this->http_code = curl_getinfo($ci, CURLINFO_HTTP_CODE);
    $this->http_info = array_merge($this->http_info, curl_getinfo($ci));
    $this->url = $url;
    curl_close($ci);
    return $response;
  }

  /**
   * Get the header info to store.
   */
  function getHeader($ch, $header) {
    $i = strpos($header, ':');
    if (!empty($i)) {
      $key = str_replace('-', '_', strtolower(substr($header, 0, $i)));
      $value = trim(substr($header, $i + 2));
      $this->http_header[$key] = $value;
    }
    return strlen($header);
  }
}
