<?php
function wc_linkedin_service_menu() {
  $items['linkedin']                   = array(
    // The title - do NOT use t() as t() is called automatically.
    'title' => 'linkedin',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Page to manage linkedin',
    'page callback' => '_wc_linkedin_service',
    // For a permissioned menu entry, we provide an access callback which
    // determines whether the current user should have access. The default is
    // user_access(), which we'll use in this case. Since it's the default,
    // we don't even have to enter it.
    'access callback' => 'user_access',
    // The 'access arguments' are passed to the 'access callback' to help it
    // do its job. In the case of user_access(), we need to pass a permission
    // as the first argument.
    'access arguments' => array(
      'manage linkedin'
    ),
    // The optional weight element tells how to order the submenu items.
    // Higher weights are "heavier", dropping to the bottom of the menu.
  );
  $items['user/%/wc_core/service/linkedin'] = array(
    // The title - do NOT use t() as t() is called automatically.
    'title' => 'My linkedin',
    'type' => MENU_LOCAL_TASK,
    'description' => 'User linkedin Account',
    'page callback' => '_wc_linkedin_service_my_linkedin',
    // For a permissioned menu entry, we provide an access callback which
    // determines whether the current user should have access. The default is
    // user_access(), which we'll use in this case. Since it's the default,
    // we don't even have to enter it.
    'access callback' => 'user_access',
    // The 'access arguments' are passed to the 'access callback' to help it
    // do its job. In the case of user_access(), we need to pass a permission
    // as the first argument.
    'access arguments' => array(
      'manage linkedin'
    ),
    // The optional weight element tells how to order the submenu items.
    // Higher weights are "heavier", dropping to the bottom of the menu.
  );
    return $items;
}

function _wc_linkedin_service() {
  $object = new ServiceRequest('linkedin');
  try {
	//request($endPoint = NULL, $arguments = array(), $http_method = 'GET', $time = 0, $callback = NULL, $responseFormat = 'json')
	
	//Need to come up with a better URL format for calling the API
    $request = $object->request($object->serviceInfo['apiURL'] . '~' . $object->serviceInfo['format']);
	/*All profile options?
	 * (id,first-name,last-name,maiden-name,formatted-name,phonetic-first-name,phonetic-last-name,formatted-phonetic-name,headline,current-status,current-share,shares,relation-to-viewer,connections,picture-url,picture-urls,positions,educations,member-url-resources,api-standard-profile-request,site-standard-profile-request,person-activities,recommendations-given,recommendations-received,network,twitter-accounts,im-accounts,phone-numbers,date-of-birth,main-address,location,industry,industry-id,distance,num-recommenders,current-status-timestamp,last-modified-timestamp,num-connections,summary,specialties,proposal-comments,interests,associations,honors,publications,patents,languages,skills,certifications,honors-awards,test-scores,volunteer,organizations-memberships,courses,projects,api-public-profile-request,site-public-profile-request,public-profile-url,three-current-positions,three-past-positions,bound-account-types,suggestions,primary-twitter-account,mfeed-rss-url,following,group-memberships,job-bookmarks)
	*/
	//testing out extended info calls
	$request2 = $object->request($object->serviceInfo['apiURL'] . '~:(skills,job-bookmarks,three-current-positions,positions,educations)' . $object->serviceInfo['format']);
	echo "<pre>";
	print_r($request2);
	echo "</pre>";
	//Example
	echo "<h3>Example Basic Profile</h3>";
	echo "<p>Name: " . $request->firstName . " " . $request->lastName . "</p>";
	echo "<p>Headline: " . $request->headline . "</p>";
  } catch (WConsumerException $e) {
    var_dump($e->getMessage());
    exit;
  }
}

function _wc_linkedin_service_my_linkedin() {
	$object = new ServiceRequest('linkedin');
	try{
		//$request = $object->request('');
	} catch (WConsumerEception $e) {
		var_dump($e->getMessage());
		exit;
	}
	//old
  /*$msg = module_load_include('inc', 'wc_core', 'includes/oauth-class');
  echo "<pre>";
  print_r($msg);
  echo "</pre>";
$config                  = array();
  $config['oauthCallback'] = 'http://www.webizly.biz/wc_core/callback';//change

  //calls to load the config hook from the module - this needs changed to only load config for the correct config per sub module
  $config                  = module_invoke_all('wc_config', $config);
	echo "<pre>";
	print_r($config);
	echo "</pre>";
$service = 'linkedin';
  // this moves the returned config settings from the sub module into variabls, it could be shortened in the future to directly use them
  $accessTokenURL          = $config['service'][$service]['accessTokenURL'];
  $authenticateURL         = $config['service'][$service]['authenticateURL'];
  $authorizeURL            = $config['service'][$service]['authorizeURL'];
  $requestTokenURL         = $config['service'][$service]['requestTokenURL'];
  
  //expecting to be provided in the config (undefined index)
  $consumerKey             = $config['service'][$service]['consumerKey'];
  $consumerSecret          = $config['service'][$service]['consumerSecret'];
  $oAuthCallback           = $config['oauthCallback'];

  // creates the connection with the appropriate settings
  $connection              = new oauthConnectionDrupal($accessTokenURL, $authenticateURL, $authorizeURL, $requestTokenURL);
  $connection->createConnection($consumerKey, $consumerSecret, variable_get('linkedin_oauth_token'), variable_get('linkedin_oauth_token_secret'));
echo "<pre>";
  print_r($connection);
echo "</pre>";
  $results    = $connection->get('http://api.linkedin.com/v1/people/~?format=json');
  $message = 'Your account = ' . $results->firstName . " " . $results->lastName;
	return $message;*/
}

function wc_linkedin_service_permission() {
  return array(
    'manage linkedin' => array(
      'title' => t('Manage linkedin'),
			'description' => t('Permits user to interact with this service'),
  ));
}

/**
 * Welcome Function
 *
 * @access	public
 * @return  string
 **/
function _wc_linkedin_service_welcome($setup = FALSE) {
	return '<p>You are '.(($setup) ? 'setup' : 'not setup').'</p>';
}
